name: "Deploy application helper"

on:
  workflow_dispatch:
    inputs:
      build:
        type: boolean
        description: "Build image"
        default: true
      push:
        type: boolean
        description: "Push image"
        default: true
      deploy:
        type: boolean
        description: "Deploy image"
        default: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout the repo 
        uses: actions/checkout@v3
      
      - name: Upgrade AWS CLI version
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get required variables
        run: |
          echo "HOST_IP"=$(aws cloudformation describe-stacks --stack-name api-infra-helper --query "Stacks[0].Outputs[?OutputKey=='ElasticIP'].OutputValue" --output text) >> $GITHUB_ENV

          echo "ACC_ID"=$(aws sts get-caller-identity --query "Account" --output text) >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build image
        if: ${{ github.event.inputs.build == 'true' }}
        run: |
          docker build ./callme -t callme:"${{ github.sha }}"
          docker tag callme:"${{ github.sha }}" ${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com/callme:"${{ github.sha }}"
          docker tag callme:"${{ github.sha }}" ${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com/callme:latest

          echo "IMAGE"=${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com/callme:"${{ github.sha }}" >> $GITHUB_ENV


      - name: use latest
        if: ${{ github.event.inputs.build != 'true' }}
        run: |
          echo "IMAGE"=${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com/callme:latest >> $GITHUB_ENV
      
      - name: Push Image
        if: ${{ github.event.inputs.push == 'true' }}
        run: |
          docker push --all-tags ${ACC_ID}.dkr.ecr.us-east-1.amazonaws.com/callme

      - name: Update image version in docker-compose file
        if: ${{ github.event.inputs.deploy == 'true' }}
        run: |
          yq eval '.services[].image = env(IMAGE)' -i docker-compose-callme.yml

      - name: Deploy 
        if: ${{ github.event.inputs.deploy == 'true' }}
        run: |
          export KEY_NAME=$(aws cloudformation describe-stacks --stack-name api-infra-helper --query "Stacks[0].Outputs[?OutputKey=='KeyNameOutput'].OutputValue" --output text)

          export DESCRIBE_KEY_PAIRS=$(aws ec2 describe-key-pairs --filters Name=key-name,Values=$KEY_NAME --query KeyPairs[*].KeyPairId --output text) 

          export ANSIBLE_HOST_KEY_CHECKING=False

          aws ssm get-parameter --name /ec2/keypair/$DESCRIBE_KEY_PAIRS --with-decryption --query Parameter.Value --output text > private_key.pem

          chmod 600 private_key.pem

          export ANSIBLE_PRIVATE_KEY_FILE=private_key.pem

          export ANSIBLE_USER=ec2-user

          export SSH_IP=$(aws cloudformation describe-stacks --stack-name api-infra-helper --query "Stacks[0].Outputs[?OutputKey=='ElasticIP'].OutputValue" --output text)

          # yq eval '.services.callme.environment += ["DJANGO_ALLOWED_HOSTS=${SSH_IP}"]' docker-compose-callme.yml


          ansible-playbook -i deployment/callme/callmerole/dynamic_inventory.py deployment/callme/callme_playbook.yml --limit api --extra-vars "aws_account_id=${ACC_ID} aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws_region=us-east-1 image=${IMAGE} host_ip=${SSH_IP}"


      
